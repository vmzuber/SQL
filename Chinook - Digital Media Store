--THIS DATA ANALYSIS UTILIZES A DATABASE CALLED "CHINOOK", WHICH REPRESENTS A DIGITAL MEDIA STORE 


--employees table: stores employees data such as employee id, last name, first name, etc. It also has a field named ReportsTo to specify who reports to whom.
--customers table: stores customers data. The line between employees.Employeeid and customers.SupportRepID shows how the two tables are related (ie, how you would JOIN them).
--invoices table: stores invoice header data (Customer ID, Billing Address, etc) and the invoice_items table stores the invoice line items data (Unit Price, Quantity).
--artists table: stores artists data.
--albums table: stores data about a list of tracks. Each album belongs to one artist. However, one artist may have multiple albums.
--media_types table: stores media types such as MPEG audio and AAC audio files.
--genres table: stores music types such as rock, jazz, metal, etc.
--tracks table: stores the data of songs. Each track belongs to one album.
--playlists table: store data about playlists. Each playlist contains a list of tracks. Each track may belong to multiple playlists. The relationship between the playlists table and tracks table is many-to-many. The playlist_track table is used to reflect this relationship.



--DATA ANALYSIS:


--Show Customers (their full names, customer ID, and country) who are not in the USA:
    --SQLite Studio version syntax for CONCAT function:
        SELECT CustomerId, FirstName || ' ' || LastName AS "Name", Country
        FROM customers
        WHERE Country <> 'USA';

    --Alt syntax for CONCAT function:
        SELECT CustomerId, CONCAT(FirstName, ' ', LastName) AS "Name", Country
        FROM customers
        WHERE Country <> 'USA';


--Show only the Customers from Brazil:
SELECT CustomerId, FirstName || ' ' || LastName AS "Name", Country
FROM customers
WHERE Country = 'Brazil';
--Can use alt version of CONCAT syntax when not using SQLite Studio


--Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country:
SELECT c.FirstName || ' ' || LastName AS "Name", i.InvoiceId, i.InvoiceDate, i.BillingCountry
FROM invoices AS i
JOIN customers AS c ON i.CustomerId = c.CustomerId
WHERE i.BillingCountry = 'Brazil'
ORDER BY "Name";


--Show the Employees who are Sales Agents:
SELECT EmployeeId, FirstName, LastName, Title
FROM employees
WHERE title LIKE '%Sale%'


--Find a unique/distinct list of billing countries from the Invoice table:
SELECT DISTINCT BillingCountry
FROM invoices


--Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name:
SELECT i.InvoiceId, e.FirstName || ' ' || e.LastName AS "Employee Name", c.SupportRepID
FROM invoices AS i
JOIN customers AS c ON i.CustomerId = c.CustomerId
JOIN employees AS e ON c.SupportRepId = e.EmployeeId


--Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers:
SELECT c.FirstName || ' ' || c.LastName AS "Customer Name", c.Country, i.total, c.SupportRepID, e.FirstName || ' ' || e.LastName AS "Employee Name"
FROM invoices AS i
JOIN customers AS c ON i.CustomerId = c.CustomerId
JOIN employees AS e ON c.SupportRepId = e.EmployeeId


--How many Invoices were there in 2009 (2 syntaxes)?
SELECT InvoiceId, InvoiceDate
FROM invoices
WHERE InvoiceDate like '2009%'

SELECT COUNT(InvoiceId)
FROM invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31'


--What are the total sales for 2009?
SELECT ROUND(SUM(Total), 2) AS "Total Sales"
FROM invoices
WHERE InvoiceDate LIKE '2009%'


--Write a query that includes the purchased track name with each invoice line ID:
SELECT i.InvoiceLineId, t.name, t.TrackId
FROM invoice_items as i
JOIN tracks AS t ON i.TrackId = t.TrackId


--Write a query that includes the purchased track name AND artist name with each invoice line ID:
SELECT i.InvoiceLineId, ar.name AS "Artist", t.name AS "Track", t.TrackId
FROM invoice_items as i
JOIN tracks AS t ON i.TrackId = t.TrackId
JOIN albums AS al ON t.AlbumId = al.AlbumId
JOIN artists AS ar ON ar.ArtistId = al.ArtistId


--Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre:
SELECT t.Name AS "Track Name", a.Title AS "Album Title", m.Name AS "Media type", g.Name AS "Genre"
FROM tracks AS t
JOIN albums AS a ON t.AlbumId = a.AlbumId
JOIN media_types AS m ON t.MediaTypeId = m.MediaTypeId
JOIN genres AS g ON t.GenreId = g.GenreId


--Show the total sales made by each sales agent:
    --Answered using a CTE:
        WITH total_sales_agent AS (SELECT i.InvoiceId, i.Total, c.SupportRepId, e.FirstName || ' ' || e.LastName AS "Employee Name"
        FROM invoices AS i
        JOIN customers AS c ON i.CustomerId = c.CustomerId
        JOIN employees AS e ON e.EmployeeId = c.SupportRepId)

        SELECT SupportRepId, "Employee Name", ROUND(SUM(Total), 2) AS "Total Sales"
        FROM total_sales_agent
        GROUP BY SupportRepId;

    --Answered using filtering/grouping:
        SELECT e.FirstName, e.LastName, ROUND(SUM(i.Total), 2) AS 'Total Sales' 
        FROM Employees AS e
        JOIN Customers AS c ON c.SupportRepId = e.EmployeeId
        JOIN Invoices AS i  ON i.CustomerId = c.CustomerId
        WHERE e.Title = 'Sales Support Agent' 
        GROUP BY c.SupportRepId;


--Which sales agent made the most dollars in sales in 2009?
    --Answered using a CTE:
        WITH total_sales_agent AS (SELECT i.InvoiceId, i.Total, c.SupportRepId, e.FirstName || ' ' || e.LastName AS "Employee Name", i.InvoiceDate
        FROM invoices AS i
        JOIN customers AS c ON i.CustomerId = c.CustomerId
        JOIN employees AS e ON e.EmployeeId = c.SupportRepId)

        SELECT SupportRepId, "Employee Name", ROUND(SUM(Total), 2) AS "Total Sales"
        FROM total_sales_agent
        WHERE InvoiceDate LIKE '2009%'
        GROUP BY SupportRepId
        ORDER BY "Total Sales" DESC;

    --Answered using filtering/grouping:
        SELECT c.SupportRepId, e.FirstName, e.LastName, ROUND(SUM(i.Total), 2) AS "Total Sales"
        FROM Employees AS e
        JOIN Customers AS c ON c.SupportRepId = e.EmployeeId
        JOIN Invoices AS i  ON i.CustomerId = c.CustomerId
        WHERE e.Title = 'Sales Support Agent' AND i.InvoiceDate LIKE '2009%' 
        GROUP BY c.SupportRepId
        ORDER BY "Total Sales" DESC LIMIT 1;






